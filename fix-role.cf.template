AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template creates a role in your AWS account that FIX can assume to perform security audits. It also deploys a lambda function that will send a callback to FIX with the account ID and name of the role that was created.

Parameters:
  ExternalId:
    Description: Your FIX-assigned External ID (DO NOT EDIT)
    Type: String
  WorkspaceId:
    Description: Your FIX-assigned Workspace ID (DO NOT EDIT)
    Type: String

Outputs:
  CallbackStatus:
    Description: Status of the FIX callback
    Value: !GetAtt FixAccessFunction.status
  FixAccessRoleName:
    Description: Name of the FIX Access Role
    Value: !GetAtt FixAccessFunction.role_name

Resources:
  FixCrossAccountAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            AWS: arn:aws:iam::{{fix_account_id}}:root
          Action:
          - 'sts:AssumeRole'
          - 'sts:TagSession'
          Condition:
            StringEquals:
              'sts:ExternalId': !Ref ExternalId
      MaxSessionDuration: 10800
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
      Policies:
      - PolicyName: FixOrgList
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - organizations:ListAccounts
            - organizations:DescribeAccount
            - ec2:DescribeRegions
            - iam:ListAccountAliases
      - PolicyName: FixPricingList
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: '*'
            Action:
            - pricing:DescribeServices
            - pricing:GetAttributeValues
            - pricing:GetProducts

  FixAccessCallbackLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
    - FixAccessCallbackFunction
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FixAccessCallbackFunction}'
      RetentionInDays: 90

  FixAccessCallbackFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt FixAccessCallbackFunctionRole.Arn
      Runtime: python3.9
      Handler: index.fix_callback
      Timeout: 30
      Code:
        ZipFile: |
          import time
          import urllib3
          import json
          import secrets
          import boto3
          from botocore.exceptions import ClientError
          http = urllib3.PoolManager()
          def fix_account_callback(workspace_id, external_id, account_id, role_name, stack_id):
              callback_url = "{{callback_url}}"
              body = {
                  "workspace_id": workspace_id,
                  "external_id": external_id,
                  "account_id": account_id,
                  "role_name": role_name,
                  "stack_id": stack_id
              }
              json_body = json.dumps(body)
              headers = {"Content-Type": "application/json", "Content-Length": str(len(json_body))}
              max_retries = 3
              print(f"Letting FIX know that the account ID for workspace ID {workspace_id} is {account_id} and the role name is {role_name} for stack ID {stack_id}")
              for attempt in range(1, max_retries + 1):
                  try:
                      response = http.request("POST", callback_url, body=json_body.encode("utf-8"), headers=headers)
                      if response.status == 200:
                          return
                      else:
                          raise RuntimeError(f"Failed to send callback to {callback_url} - {response.status} {response.data.decode('utf-8')}")
                  except Exception as e:
                      print(f"Failed to send callback to {callback_url} - {e}")
                  if attempt < max_retries:
                      print(f"Retrying in {attempt} seconds")
                      time.sleep(attempt)
              raise RuntimeError(f"Failed to send callback to {url} after {max_retries} attempts")
          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event["ResponseURL"]
              responseBody = {}
              responseBody["Status"] = responseStatus
              responseBody["Reason"] = "See the details in CloudWatch Log Stream: " + context.log_stream_name
              responseBody["PhysicalResourceId"] = physicalResourceId or context.log_stream_name
              responseBody["StackId"] = event["StackId"]
              responseBody["RequestId"] = event["RequestId"]
              responseBody["LogicalResourceId"] = event["LogicalResourceId"]
              responseBody["NoEcho"] = noEcho
              responseBody["Data"] = responseData
              json_response_body = json.dumps(responseBody)
              headers = {"Content-Type": "", "Content-Length": str(len(json_response_body))}
              try:
                  response = http.request("PUT", responseUrl, body=json_response_body.encode("utf-8"), headers=headers)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))
          def fix_callback(event, context):
              stack_id = event["ResourceProperties"].get("StackId")
              role_name = event["ResourceProperties"].get("RoleName")
              workspace_id = event["ResourceProperties"].get("WorkspaceId")
              external_id = event["ResourceProperties"].get("ExternalId")
              response_data = {"role_name": role_name, "status": "Successfully sent callback to FIX"}
              if event.get("RequestType") in ("Delete", "Update"):
                  print(f"Skipping callback to FIX for {event.get('RequestType')}")
                  send(event, context, "SUCCESS", response_data)
                  return
              try:
                  account_id = boto3.client("sts").get_caller_identity().get("Account")
                  fix_account_callback(workspace_id, external_id, account_id, role_name, stack_id)
              except Exception as e:
                  response_data["status"] = "Failed to send callback to FIX"
                  print("fix_callback(..) failed: " + str(e))
                  send(event, context, "FAILED", response_data)
                  return
              send(event, context, "SUCCESS", response_data)

  FixAccessCallbackFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: FixAccessCallbackFunctionExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: 'arn:aws:logs:*:*:*'

  FixAccessFunction:
    Type: Custom::Function
    DeletionPolicy: Retain
    Properties:
      StackId: !Ref AWS::StackId
      RoleName: !Ref FixCrossAccountAccessRole
      WorkspaceId: !Ref WorkspaceId
      ExternalId: !Ref ExternalId
      ServiceToken: !GetAtt FixAccessCallbackFunction.Arn
